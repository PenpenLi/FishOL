//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ResMgrWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ResMgr), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("GetProgress", GetProgress);
		L.RegFunction("LoadPackage", LoadPackage);
		L.RegFunction("Load", Load);
		L.RegFunction("LoadGameObject", LoadGameObject);
		L.RegFunction("LoadScene", LoadScene);
		L.RegFunction("LoadComplete", LoadComplete);
		L.RegFunction("GetCached", GetCached);
		L.RegFunction("Unload", Unload);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("assetManager", get_assetManager, set_assetManager);
		L.RegFunction("LoadObjectCompleteHandler", ResMgr_LoadObjectCompleteHandler);
		L.RegFunction("LoadGameObjectCompleteHandler", ResMgr_LoadGameObjectCompleteHandler);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResMgr obj = (ResMgr)ToLua.CheckObject<ResMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
			obj.Initialize(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetProgress(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ResMgr obj = (ResMgr)ToLua.CheckObject<ResMgr>(L, 1);
			float o = obj.GetProgress();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadPackage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			ResMgr obj = (ResMgr)ToLua.CheckObject<ResMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<string> arg1 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 3);
			LuaFunction arg2 = ToLua.CheckLuaFunction(L, 4);
			obj.LoadPackage(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<Tangzx.ABSystem.AssetBundleManager.LoadAssetCompleteHandler>(L, 3))
			{
				ResMgr obj = (ResMgr)ToLua.CheckObject<ResMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				Tangzx.ABSystem.AssetBundleManager.LoadAssetCompleteHandler arg1 = (Tangzx.ABSystem.AssetBundleManager.LoadAssetCompleteHandler)ToLua.ToObject(L, 3);
				obj.Load(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<ResMgr.LoadObjectCompleteHandler>(L, 3))
			{
				ResMgr obj = (ResMgr)ToLua.CheckObject<ResMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				ResMgr.LoadObjectCompleteHandler arg1 = (ResMgr.LoadObjectCompleteHandler)ToLua.ToObject(L, 3);
				obj.Load(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<ResMgr.LoadGameObjectCompleteHandler>(L, 3))
			{
				ResMgr obj = (ResMgr)ToLua.CheckObject<ResMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				ResMgr.LoadGameObjectCompleteHandler arg1 = (ResMgr.LoadGameObjectCompleteHandler)ToLua.ToObject(L, 3);
				obj.Load(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResMgr.Load");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResMgr obj = (ResMgr)ToLua.CheckObject<ResMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			ResMgr.LoadGameObjectCompleteHandler arg1 = (ResMgr.LoadGameObjectCompleteHandler)ToLua.CheckDelegate<ResMgr.LoadGameObjectCompleteHandler>(L, 3);
			obj.LoadGameObject(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResMgr obj = (ResMgr)ToLua.CheckObject<ResMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
			obj.LoadScene(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadComplete(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ResMgr obj = (ResMgr)ToLua.CheckObject<ResMgr>(L, 1);
			ResMgr.TaskLoader arg0 = (ResMgr.TaskLoader)ToLua.CheckObject<ResMgr.TaskLoader>(L, 2);
			obj.LoadComplete(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCached(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ResMgr obj = (ResMgr)ToLua.CheckObject<ResMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			AssetObject o = obj.GetCached(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ResMgr obj = (ResMgr)ToLua.CheckObject<ResMgr>(L, 1);
			AssetObject arg0 = (AssetObject)ToLua.CheckObject<AssetObject>(L, 2);
			obj.Unload(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_assetManager(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResMgr obj = (ResMgr)o;
			Tangzx.ABSystem.AssetBundleManager ret = obj.assetManager;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index assetManager on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_assetManager(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResMgr obj = (ResMgr)o;
			Tangzx.ABSystem.AssetBundleManager arg0 = (Tangzx.ABSystem.AssetBundleManager)ToLua.CheckObject<Tangzx.ABSystem.AssetBundleManager>(L, 2);
			obj.assetManager = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index assetManager on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResMgr_LoadObjectCompleteHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<ResMgr.LoadObjectCompleteHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<ResMgr.LoadObjectCompleteHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResMgr_LoadGameObjectCompleteHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<ResMgr.LoadGameObjectCompleteHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<ResMgr.LoadGameObjectCompleteHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

